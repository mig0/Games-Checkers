#!/usr/bin/perl

# Just run the script; also try: COMPACT_BOARD=1 RANDOM_BOARD=1 script

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Games::Checkers::Board;
use Games::Checkers::Constants;
use Games::Checkers::MoveConstants;
use Games::Checkers::BoardTree;

my $board = Games::Checkers::Board->new($ENV{BOARD}, $ENV{BOARD_SIZE});
my $color = $ENV{BLACK} ? Black : White;

my $move_counter = Games::Checkers::CountMoveList->new($board, $color);
die "Internal problem" unless $move_counter->{status} == Ok;
print "There are ", $move_counter->get_count, " possible initial moves.\n";

my $board_node = Games::Checkers::BoardTreeNode->new($board, NO_MOVE);
die "Internal problem" unless $board_node->expand($color) == Ok;

my $board_dump = $board->dump;
my $expanded_nodes = $board_node->{sons};
print $board_dump unless @$expanded_nodes;

foreach (@$expanded_nodes) {
	my $board = $_->{board};
	my $score = $board->get_score($color = $color == White ? Black : White);
	print $board->dump($board_dump, "$cost " . $_->{move}->dump($board));

	if ($ENV{EXPAND}) {
		my $board_tree = Games::Checkers::BoardTree->new($board, $color, $ENV{LEVEL});
		my $move = $board_tree->choose_best_move;

		$board->apply_move($move);
		$score = $board->get_score($color = $color == White ? Black : White);
		print $board->dump(3, "$cost " . $move->dump($board));
	}
}
